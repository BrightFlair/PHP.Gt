#!/usr/bin/env php
<?php
// Usage: gt-serve [-p PORT] [APPROOT]
$ip = "0.0.0.0";
$port = 8080;
$appRoot = getcwd();

$readArgNum = 0;
foreach($argv as $i => $arg) {
	if($arg === "-p"
	|| $arg === "--port") {
		$readArgNum = $i + 1;
		$port = (int)$argv[$i + 1];
	}
}

// If there is more arguments than have been read already as flags,
// use the last argument as appRoot.
if($argc - 1 > $readArgNum) {
	$appRoot = $argv[$argc - 1];
}

$docRoot = $appRoot . DIRECTORY_SEPARATOR . "www";
$composerPath = realpath($appRoot . DIRECTORY_SEPARATOR . "composer.json");

if(!is_file($composerPath)) {
	fwrite(STDERR, "ERROR: No project directory found at $appRoot" . PHP_EOL);
	exit(1);
}
$router = realpath(__DIR__ . "/../go.php");

$id = uniqid("gt-serve-");
$tmpDir = implode(DIRECTORY_SEPARATOR, [
	sys_get_temp_dir(),
	"phpgt",
	"webengine",
	"proc",
	$id,
]);
if(!is_dir($tmpDir)) {
	mkdir($tmpDir, 0775, true);
}

define("CHILD_PIPES", ["STDOUT", "STDERR"]);

$filePipes = [];
foreach(CHILD_PIPES as $pipe) {
	$filePipes[$pipe] = implode(DIRECTORY_SEPARATOR, [
		$tmpDir,
		$pipe,
	]);
	touch($filePipes[$pipe]);
}

if(!is_dir($docRoot)) {
	mkdir($docRoot, 0775, true);
}
$command = "php -S $ip:$port -d log_errors=1 -t $docRoot $router";
fwrite(STDOUT, "Starting server: $command" . PHP_EOL);

$pipes = [];
$descriptor = [
	0 => ["pipe", "r"],
	1 => ["file", $filePipes["STDOUT"], "w"],
	2 => ["file", $filePipes["STDERR"], "w"],
];
$process = proc_open($command, $descriptor, $pipes);

if(is_resource($process)) {
	$link = "http://localhost";
	if($port !== 80) {
		$link .= ":$port";
	}
	$link .= "/";

	fwrite(
		STDOUT,
		"Server running. Go to $link in your browser."
		. PHP_EOL
		. PHP_EOL
	);
}
else {
	fwrite(
		STDERR,
		"Error starting inbuilt server!" . PHP_EOL
	);
	exit(1);
}

$handles = [];
$outPipes = [];
foreach(CHILD_PIPES as $pipe) {
	$handles[$pipe] = fopen($filePipes[$pipe], "r");
	$outPipes[$pipe] = constant($pipe);
}

while(is_resource($process)) {
	foreach($handles as $pipe => $fh) {
		fwrite($outPipes[$pipe], fread($fh, 1024));
	}
	usleep(100000);
}

fwrite(STDERR, "Server process terminated!" . PHP_EOL);