#!/usr/bin/env php
<?php
/**
 * This is a proxy script to the PhpGt/Build runner (vendor/phpgt/build/bin/build)
 */
$id = uniqid("gt-build-");
$tmpDir = implode(DIRECTORY_SEPARATOR, [
	sys_get_temp_dir(),
	"phpgt",
	"webengine",
	"proc",
	$id,
]);
if(!is_dir($tmpDir)) {
	mkdir($tmpDir, 0775, true);
}

define("CHILD_PIPES", ["STDOUT", "STDERR"]);

$filePipes = [];
foreach(CHILD_PIPES as $pipe) {
	$filePipes[$pipe] = implode(DIRECTORY_SEPARATOR, [
		$tmpDir,
		$pipe,
	]);
	touch($filePipes[$pipe]);
}

$buildScript = realpath(implode(DIRECTORY_SEPARATOR, [
	getcwd(),
	"vendor",
	"bin",
	"build",
]));
$command = $buildScript;

// If there is no argument passed that isn't a flag, add webengine's default build path.
$pathArgumentSet = false;

foreach($argv as $i => $arg) {
	if($i === 0) {
		continue;
	}

	if($arg[0] !== "-") {
		$pathArgumentSet = true;
	}

	$command .= " ";
	$command .= $arg;
}

if(!$pathArgumentSet) {
	$webenginePath = implode(DIRECTORY_SEPARATOR, [
		getcwd(),
		"vendor",
		"phpgt",
		"webengine",
		"build.default.json",
	]);

	$command .= " ";
	$command .= getcwd();
	$command .= " ";
	$command .= $webenginePath;
}

if(!is_file($buildScript)) {
	fwrite(STDERR, "Error: Build script not found!" . PHP_EOL);
}

fwrite(STDOUT, "Starting build runner: $command" . PHP_EOL);

$pipes = [];
$descriptor = [
	0 => ["pipe", "r"],
	1 => ["file", $filePipes["STDOUT"], "w"],
	2 => ["file", $filePipes["STDERR"], "w"],
];
$process = proc_open($command, $descriptor, $pipes);

if(is_resource($process)) {
	fwrite(
		STDOUT,
		"Build tasks running."
		. PHP_EOL
		. PHP_EOL
	);
}
else {
	fwrite(
		STDERR,
		"Error starting build tasks!" . PHP_EOL
	);
	exit(1);
}

$handles = [];
$outPipes = [];
foreach(CHILD_PIPES as $pipe) {
	$handles[$pipe] = fopen($filePipes[$pipe], "r");
	$outPipes[$pipe] = constant($pipe);
}

do {
	usleep(100000);

	foreach($handles as $pipe => $fh) {
		fwrite($outPipes[$pipe], fread($fh, 1024));
	}

	$status = proc_get_status($process);
} while($status["running"]);

if($status["exitcode"] === 0) {
	fwrite(STDOUT, "Build process completed successfully." . PHP_EOL);
}
else {
	fwrite(STDERR, "Build process terminated with exit code "
		. $status["exitcode"]
		. PHP_EOL);
}